<?php

namespace App\Providers;

use Illuminate\Support\Facades\Event;
use Illuminate\Support\Facades\Route;
use Illuminate\Support\ServiceProvider;
use MichaelNabil230\MultiTenancy\Events;
use MichaelNabil230\MultiTenancy\Middleware;
use MichaelNabil230\MultiTenancy\Listeners;
use MichaelNabil230\MultiTenancy\Models\Tenant;
use MichaelNabil230\MultiTenancy\Tenancy;

class TenancyServiceProvider extends ServiceProvider
{
    public function events(): array
    {
        return [
            // Tenant events
            // Events\CreatingTenant::class => [],
            Events\Tenant\TenantCreated::class => [
                Listeners\SeedDatabase::class,
            ],
            Events\Tenant\SavingTenant::class => [],
            Events\Tenant\TenantSaved::class => [],
            Events\Tenant\UpdatingTenant::class => [],
            Events\Tenant\TenantUpdated::class => [],
            Events\Tenant\DeletingTenant::class => [],
            Events\Tenant\TenantDeleted::class => [],

            // Domain events
            Events\Domain\CreatingDomain::class => [],
            Events\Domain\DomainCreated::class => [],
            Events\Domain\SavingDomain::class => [],
            Events\Domain\DomainSaved::class => [],
            Events\Domain\UpdatingDomain::class => [],
            Events\Domain\DomainUpdated::class => [],
            Events\Domain\DeletingDomain::class => [],
            Events\Domain\DomainDeleted::class => [],

            // Tenancy events
            Events\InitializingTenancy::class => [],
            Events\TenancyInitialized::class => [
                Listeners\BootstrapTenancy::class,
            ],
            Events\EndingTenancy::class => [],
            Events\TenancyEnded::class => [],

            Events\BootstrappingTenancy::class => [],
            Events\TenancyBootstrapped::class => [],
        ];
    }

    public function register(): void
    {
        // Make sure Tenancy is stateful.
        $this->app->singleton(Tenancy::class);

        // Make sure features are bootstrapped as soon as Tenancy is instantiated.
        $this->app->extend(Tenancy::class, function (Tenancy $tenancy) {
            foreach ($this->app['config']['multi-tenancy.features'] ?? [] as $feature) {
                $this->app[$feature]->bootstrap($tenancy);
            }

            return $tenancy;
        });

        // Make it possible to inject the current tenant by trephining the Tenant contract.
        $this->app->bind(Tenant::class, function ($app) {
            return $app[Tenancy::class]->tenant;
        });
    }

    public function boot(): void
    {
        $this->bootEvents();
        $this->mapRoutes();
        $this->mapApiRoutes();
    }

    protected function bootEvents(): void
    {
        foreach ($this->events() as $event => $listeners) {
            foreach ($listeners as $listener) {
                Event::listen($event, $listener);
            }
        }
    }

    protected function mapRoutes(): void
    {
        Route::middleware(['web', Middleware\InitializeTenancyByTenantUser::class])
            ->name('tenant.')
            ->prefix('tenant/')
            ->group(base_path('routes/tenant/web.php'));
    }

    protected function mapApiRoutes(): void
    {
        Route::prefix('api/tenant')
            ->middleware(['api', Middleware\InitializeTenancyByRequestData::class])
            ->group(base_path('routes/tenant/api.php'));
    }
}
